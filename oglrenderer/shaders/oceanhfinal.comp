#version 450 core
#define GLSL_SHADER
#extension GL_EXT_scalar_block_layout : require

#include "deviceconstants.h"
#include "devicestructs.h"

layout(local_size_x = PRECOMPUTE_OCEAN_WAVES_LOCAL_SIZE, local_size_y = PRECOMPUTE_OCEAN_WAVES_LOCAL_SIZE) in;

layout(std430, binding = RENDERER_PARAMS) uniform RendererParamsUniform
{
    RendererParams renderParams;
};
layout(std430, binding = OCEAN_PARAMS) uniform OceanParamsUniform
{
    OceanParams oceanParams;
};

layout(binding = OCEAN_HEIGHT_FINAL_H0K, rgba32f) uniform readonly image2D h0Texture;
layout(binding = OCEAN_HEIGHT_FINAL_H_X, rgba32f) uniform writeonly image2D hDxTexture;
layout(binding = OCEAN_HEIGHT_FINAL_H_Y, rgba32f) uniform writeonly image2D hDyTexture;
layout(binding = OCEAN_HEIGHT_FINAL_H_Z, rgba32f) uniform writeonly image2D hDzTexture;


struct complex
{
	vec2 mComponent;
};


complex mul(
	in complex c0, 
	in complex c1)
{
	complex result;
	result.mComponent.x = c0.mComponent.x * c1.mComponent.x - c0.mComponent.y * c1.mComponent.y;
	result.mComponent.y = c0.mComponent.x * c1.mComponent.y + c0.mComponent.y * c1.mComponent.x;
	return result;
}


complex add(
    in complex c0,
    in complex c1)
{
    complex result;
    result.mComponent.x = c0.mComponent.x + c1.mComponent.x;
    result.mComponent.y = c0.mComponent.y + c1.mComponent.y;
    return result;
}


complex conj(
    in complex c)
{
    complex result;
    result.mComponent.x = c.mComponent.x;
    result.mComponent.y = -c.mComponent.y;
    return result;
}


void main()
{
    const int N = oceanParams.mHeightSettings.x;
	if (int(gl_GlobalInvocationID.x) >= N || int(gl_GlobalInvocationID.y) >= N)
	{
		return;
	}
    
    const vec2 nm = gl_GlobalInvocationID.xy - float(N) / 2.0f;
    const vec2 k = vec2((2 * PI * nm.x) / float(oceanParams.mHeightSettings.y),
                        (2 * PI * nm.y) / float(oceanParams.mHeightSettings.y));

    // dispersion relation
    const float kLength = max(length(k), 0.00001f);
    const float w = sqrt(9.81f * kLength);

    vec4 h0 = imageLoad(h0Texture, ivec2(gl_GlobalInvocationID.xy));
    complex fourierComponent = complex(h0.xy);
    complex fourierComponentConj = conj(complex(h0.zw));

    const float cosWt = cos(w * oceanParams.mTime.x);
    const float sinWt = sin(w * oceanParams.mTime.x);

    // complex euler
    complex expiWt = complex(vec2(cosWt, sinWt));
    complex expiWtInv = complex(vec2(cosWt, -sinWt));

    // height field
    complex hDy = add(mul(fourierComponent, expiWt), mul(fourierComponentConj, expiWtInv));

    complex dx = complex(vec2(0.0f, -k.x / kLength));
    complex hDx = mul(dx, hDy);

    complex dy = complex(vec2(0.0f, -k.y / kLength));
    complex hDz = mul(dy, hDy);

    imageStore(hDxTexture, ivec2(gl_GlobalInvocationID.xy), vec4(hDx.mComponent.xy, 0.0f, 1.0f));
    imageStore(hDyTexture, ivec2(gl_GlobalInvocationID.xy), vec4(hDy.mComponent.xy, 0.0f, 1.0f));
    imageStore(hDzTexture, ivec2(gl_GlobalInvocationID.xy), vec4(hDz.mComponent.xy, 0.0f, 1.0f));

}