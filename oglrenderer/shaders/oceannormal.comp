#version 450 core
#define GLSL_SHADER
#extension GL_EXT_scalar_block_layout : require

#include "complex.h"
#include "deviceconstants.h"
#include "devicestructs.h"

layout(local_size_x = PRECOMPUTE_OCEAN_WAVES_LOCAL_SIZE, local_size_y = PRECOMPUTE_OCEAN_WAVES_LOCAL_SIZE) in;

layout(binding = OCEAN_NOMRAL_INPUT_TEX, rgba32f) uniform readonly image2D displacement;
layout(binding = OCEAN_NOMRAL_OUTPUT_TEX, rgba32f) uniform writeonly image2D normal;

layout(std430, binding = OCEAN_PARAMS) uniform OceanParamsUniform
{
    OceanParams oceanParams;
};

void main()
{
    ivec2 x = ivec2(gl_GlobalInvocationID.xy);
    if (x.x >= oceanParams.mHeightSettings.x || x.y >= oceanParams.mHeightSettings.y)
    {
        return;
    }

    const float texel = imageLoad(displacement, x).y;

    const ivec2 horizontalNeighbor1 = (x + ivec2(1, 0)) % OCEAN_RESOLUTION;
    const ivec2 horizontalNeighbor2 = (x - ivec2(1, 0)) % OCEAN_RESOLUTION;

    const ivec2 verticalNeighbor1 = (x + ivec2(0, 1)) % OCEAN_RESOLUTION;
    const ivec2 verticalNeighbor2 = (x - ivec2(0, 1)) % OCEAN_RESOLUTION;
    float texelSize = 1.0f / OCEAN_RESOLUTION * oceanParams.mHeightSettings.y;

    const float left = (imageLoad(displacement, horizontalNeighbor2).y - texel);
    const float right = (imageLoad(displacement, horizontalNeighbor1).y - texel);
    const float top = (imageLoad(displacement, verticalNeighbor1).y - texel);
    const float bottom = (imageLoad(displacement, verticalNeighbor2).y - texel);

    imageStore(normal, x, vec4(normalize(vec3(right - left, 1.0f, top - bottom)), 1.0f));
}