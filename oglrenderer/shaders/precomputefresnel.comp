#version 450 core
#define GLSL_SHADER
#extension GL_EXT_scalar_block_layout : require

#include "bsdf.h"
#include "deviceconstants.h"
#include "devicestructs.h"
#include "random.h"

layout(local_size_x = PRECOMPUTE_FRESNEL_LOCAL_SIZE, local_size_y = PRECOMPUTE_FRESNEL_LOCAL_SIZE) in;

layout(std430, binding = RENDERER_PARAMS) uniform RendererParamsUniform
{
    RendererParams renderParams;
};

layout(binding = PRECOMPUTE_FRESNEL_TEX, rgba32f) uniform image2D fresnelTex;

void main()
{
    const vec2 uv = gl_GlobalInvocationID.xy / 100.0f;

    const float roughness = uv.x;
    const float roughness2 = roughness * roughness;
    const float cosTheta = uv.y;
    const float theta = acos(cosTheta);

    const vec3 wo = normalize(vec3(sin(theta), 0, cosTheta));
    
    vec3 result = vec3(0.0f);
    for (int i = 0; i < SAMPLE_COUNT; i++)
    {
        // random variables
        vec2 u = hammersley(i, SAMPLE_COUNT);

        // Compute the half vector and incoming light direction.
        float alpha = roughness2;
        vec3 wh = GGX_sample(u, wo, vec2(roughness));
        vec3 wi = -reflect(wo, wh);

        // Compute dot products for this sample.
        float nDotL = clamp(wi.z, 0.0f, 1.0);
        float oDotH = clamp(dot(wo, wh), 0.0f, 1.0);

        // Compute the Fresnel term.
        float Fc = pow(1.0f - oDotH, 5.0f);

        // Compute the sample weight, combining the geometric term, BRDF denominator, and PDF.
        // https://hal.inria.fr/hal-00996995v2/document, Algorithm 2
        const float g1 = G1(cosTheta, alpha);
        const float g2 = G2(nDotL, cosTheta, alpha);
        float weight = g1 == 0.0f ? 1.0f : g2 / g1;

        // Add the contribution of this sample.
        result.x += (1.0f - Fc) * weight;
        result.y += weight * Fc;
        result.z += fresnel(1.5f, oDotH);
    }

    // Normalize integrated terms.
    result /= float(SAMPLE_COUNT);
    imageStore(fresnelTex, ivec2(gl_GlobalInvocationID.xy), vec4(result.xyz, 1.0f));
}